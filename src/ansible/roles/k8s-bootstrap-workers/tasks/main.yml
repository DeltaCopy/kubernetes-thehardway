---
# tasks file for worker nodes

- name: Remove dpkg lock file before running apt update
  ansible.builtin.file:
    path: /var/lib/dpkg/lock-frontend
    state: absent
  become: yes
  when:
    - '"worker-" in inventory_hostname'
    - ansible_facts['os_family'] == "Debian"

- name: apt update remove lock
  ansible.builtin.apt:
    name: "*"
    state: latest
  register: apt_action
  retries: 100
  become: yes
  until: apt_action is success or ('Failed to lock apt for exclusive operation' not in apt_action.msg and '/var/lib/dpkg/lock' not in apt_action.msg)
  when:
    - '"worker-" in inventory_hostname'
    - ansible_facts['os_family'] == "Debian"

# install OS dependencies
# the socat binary enables support for the kubectl port-forward command

- name: Install socat, conntrack, ipset
  ansible.builtin.apt:
    pkg:
      - socat
      - conntrack
      - ipset
    update_cache: yes
  become: yes
  when:
    - '"worker-" in inventory_hostname'
    - ansible_facts['os_family'] == "Debian"

# disable swap, the kubelet will fail if swap is enabled
# recommended to be disabled to ensure Kubernetes provides proper resource allocation and quality of service

- name: Disable swap
  ansible.builtin.command: "swapoff -a"
  become: yes
  when: '"worker-" in inventory_hostname'

- name: Download Worker Binaries - cri-tools, runc, cni-plugins, containerd, kubectl, kube-proxy, kubelet
  ansible.builtin.get_url:
    url: "{{ item }}"
    dest: "{{ temp_dir }}"
  loop:
    - "{{ cri_tools_dl }}"
    - "{{ runc_dl }}"
    - "{{ cni_plugins_dl }}"
    - "{{ containerd_dl }}"
    - "{{ kubectl_dl }}"
    - "{{ kube_proxy_dl }}"
    - "{{ kubelet_dl }}"
  when: '"worker-" in inventory_hostname'

- name: Create installation directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  become: yes
  loop:
    - "/etc/cni/net.d"
    - "/opt/cni/bin"
    - "/var/lib/kubelet"
    - "/var/lib/kube-proxy"
    - "/var/lib/kubernetes"
    - "/var/run/kubernetes"
    - "{{ temp_dir }}/containerd"
    - /etc/containerd
  when: '"worker-" in inventory_hostname'

- name: Extract worker Binaries - cri tools, containerd
  ansible.builtin.unarchive:
    src: "{{ temp_dir }}/{{ item }}"
    dest: "{{ temp_dir }}"
    remote_src: yes
  loop:
    - "{{ cri_tools_dl | basename }}"
  when: '"worker-" in inventory_hostname'

- name: Extract worker Binaries - containerd
  ansible.builtin.unarchive:
    src: "{{ temp_dir }}/{{ item }}"
    dest: "{{ temp_dir }}/containerd"
    remote_src: yes
  loop:
    - "{{ containerd_dl | basename }}"
  when: '"worker-" in inventory_hostname'
  become: yes

- name: Move runc.amd64 to runc
  ansible.builtin.command: "mv {{ temp_dir }}/{{ runc_dl | basename }} {{ temp_dir }}/runc"
  when: '"worker-" in inventory_hostname'

- name: Make runc, kubectl, crictl, kube-proxy, kubelet executable
  ansible.builtin.file:
    path: "{{ item }}"
    mode: "0775"
  loop:
    - "{{ temp_dir }}/runc"
    - "{{ temp_dir }}/{{ cri_tools_dl | basename }}"
    - "{{ temp_dir }}/kubectl"
    - "{{ temp_dir }}/kube-proxy"
    - "{{ temp_dir }}/kubelet"
  when: '"worker-" in inventory_hostname'

- name: Move runc, kubectl, crictl, kube-proxy, kubelet Binaries to /usr/local/bin
  ansible.builtin.command: "mv {{ item }} /usr/local/bin"
  loop:
    - "{{ temp_dir }}/runc"
    - "{{ temp_dir }}/{{ cri_tools_dl | basename }}"
    - "{{ temp_dir }}/kubectl"
    - "{{ temp_dir }}/kube-proxy"
    - "{{ temp_dir }}/kubelet"
  become: yes
  when: '"worker-" in inventory_hostname'

- name: Install worker Binaries - cni cni_plugins
  ansible.builtin.unarchive:
    src: "{{ temp_dir }}/{{ cni_plugins_dl | basename }}"
    dest: "/opt/cni/bin"
    remote_src: yes
  become: yes
  when: '"worker-" in inventory_hostname'

- name: Move containderd* files to /bin
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/bin/"
  become: yes
  with_fileglob:
    - "{{ temp_dir }}/containerd/bin/containerd*"
    - "{{ temp_dir }}/containerd/bin/ctr*"
  when: '"worker-" in inventory_hostname'
 
- name: Create the bridge network configuration file
  ansible.builtin.template:
    src: 10-bridge.conf.j2
    dest: /etc/cni/net.d/10-bridge.conf
  become: yes
  when: '"worker-" in inventory_hostname'

- name: Create the loopback network configuration file
  ansible.builtin.copy:
    src: 99-loopback.conf
    dest: /etc/cni/net.d/99-loopback.conf
  become: yes
  when: '"worker-" in inventory_hostname'

- name: Create the containerd configuration file
  ansible.builtin.copy:
    src: containerd-config.toml
    dest: /etc/containerd/config.toml
  become: yes
  when: '"worker-" in inventory_hostname'

- name: Create the containerd service file
  ansible.builtin.copy:
    src: containerd.service
    dest: /etc/systemd/system/containerd.service
  become: yes
  when: '"worker-" in inventory_hostname'

- name: Copy worker-[instance]-key.pem & worker-[instance].pem file to "/var/lib/kubelet"
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: /var/lib/kubelet/
    remote_src: yes
  loop:
    - "{{ remote_path }}/{{ inventory_hostname }}-key.pem"
    - "{{ remote_path }}/{{ inventory_hostname }}.pem"
  become: yes
  when: '"worker-" in inventory_hostname'

- name: Copy worker-[instance].kubeconfig file to "/var/lib/kubelet/kubeconfig"
  ansible.builtin.copy:
    src: "{{ remote_path }}/{{ inventory_hostname }}.kubeconfig"
    dest: /var/lib/kubelet/kubeconfig
    remote_src: yes
  become: yes
  when: '"worker-" in inventory_hostname'

- name: Copy ca.pem file to "/var/lib/kubernetes"
  ansible.builtin.copy:
    src: "{{ remote_path }}/ca.pem"
    dest: /var/lib/kubernetes
    remote_src: yes
  become: yes
  when: '"worker-" in inventory_hostname'

- name: Create the kubelet-config.yaml configuration file
  ansible.builtin.template:
    src: kubelet-config.yaml.j2
    dest: /var/lib/kubelet/kubelet-config.yaml
  become: yes
  when: '"worker-" in inventory_hostname'
  tags: copy

- name: Create the kubelet.service systemd unit file
  ansible.builtin.copy:
    src: kubelet.service
    dest: /etc/systemd/system/kubelet.service
  become: yes
  when: '"worker-" in inventory_hostname'

- name: Copy kube-proxy.kubeconfig file to "/var/lib/kube-proxy/kubeconfig"
  ansible.builtin.copy:
    src: "{{ remote_path }}/kube-proxy.kubeconfig"
    dest: /var/lib/kube-proxy/kubeconfig
    remote_src: yes
  become: yes
  when: '"worker-" in inventory_hostname'

- name: Create kube-proxy-config.yaml file
  ansible.builtin.template:
    src: kube-proxy-config.yaml.j2
    dest: /var/lib/kube-proxy/kube-proxy-config.yaml
  become: yes
  when: '"worker-" in inventory_hostname'

- name: Create kube-proxy.service
  ansible.builtin.copy:
    src: kube-proxy.service
    dest: /etc/systemd/system/kube-proxy.service
  become: yes
  when: '"worker-" in inventory_hostname'

- name: daemon_reload
  ansible.builtin.systemd:
    daemon_reload: yes
  become: yes
  when: '"worker-" in inventory_hostname'

- name: Register and start containerd kubelet kube-proxy services
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: yes
  register: service_stat
  become: yes
  loop:
    - containerd
    - kubelet
    - kube-proxy
  when: '"worker-" in inventory_hostname'
  tags: copy

- name: Display worker node services
  debug:
    msg: "{{ service_stat }}"
  when: '"worker-" in inventory_hostname'